{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"text-center text-muted my-4\"\n};\nconst _hoisted_4 = {\n  class: \"message-date-divider\"\n};\nconst _hoisted_5 = {\n  class: \"message-content\"\n};\nconst _hoisted_6 = {\n  class: \"message-time\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [$props.messages.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \" No messages yet. Start the conversation! \")) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.groupedMessages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"message-group\"\n    }, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.formatDate(index)), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message, msg => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: msg._id,\n        class: _normalizeClass([\"message\", {\n          'message-sent': $setup.isSentMessage(msg),\n          'message-received': !$setup.isSentMessage(msg)\n        }])\n      }, [_createElementVNode(\"div\", _hoisted_5, [_createTextVNode(_toDisplayString(msg.content) + \" \", 1 /* TEXT */), _createElementVNode(\"small\", _hoisted_6, _toDisplayString($setup.formatTime(msg.createdAt || msg.timestamp)), 1 /* TEXT */)])], 2 /* CLASS */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$props","messages","length","_hoisted_3","_createCommentVNode","_Fragment","_renderList","$setup","groupedMessages","message","index","_hoisted_4","_toDisplayString","formatDate","msg","_id","_normalizeClass","isSentMessage","_hoisted_5","_createTextVNode","content","_hoisted_6","formatTime","createdAt","timestamp"],"sources":["E:\\cursor\\client\\src\\components\\chat\\ChatWindow.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-container\">\r\n      <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n        <div v-if=\"messages.length === 0\" class=\"text-center text-muted my-4\">\r\n          No messages yet. Start the conversation!\r\n        </div>\r\n        <div \r\n          v-for=\"(message, index) in groupedMessages\" \r\n          :key=\"index\"\r\n          class=\"message-group\"\r\n        >\r\n          <div class=\"message-date-divider\">{{ formatDate(index) }}</div>\r\n          <div \r\n            v-for=\"msg in message\" \r\n            :key=\"msg._id\"\r\n            class=\"message\"\r\n            :class=\"{ 'message-sent': isSentMessage(msg), 'message-received': !isSentMessage(msg) }\"\r\n          >\r\n            <div class=\"message-content\">\r\n              {{ msg.content }}\r\n              <small class=\"message-time\">{{ formatTime(msg.createdAt || msg.timestamp) }}</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUpdated, ref, computed } from 'vue'\r\n  \r\n  export default {\r\n    name: 'ChatWindow',\r\n    props: {\r\n      messages: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      currentUser: {\r\n        type: Object,\r\n        required: true\r\n      },\r\n      selectedUser: {\r\n        type: Object,\r\n        required: true\r\n      }\r\n    },\r\n    setup(props) {\r\n      const messagesContainer = ref(null)\r\n  \r\n      // Group messages by date\r\n      const groupedMessages = computed(() => {\r\n        const groups = {}\r\n        props.messages.forEach(msg => {\r\n          const date = new Date(msg.createdAt || msg.timestamp).toLocaleDateString()\r\n          if (!groups[date]) {\r\n            groups[date] = []\r\n          }\r\n          groups[date].push(msg)\r\n        })\r\n        return groups\r\n      })\r\n  \r\n      const scrollToBottom = () => {\r\n        if (messagesContainer.value) {\r\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n        }\r\n      }\r\n  \r\n      onMounted(() => {\r\n        scrollToBottom()\r\n      })\r\n  \r\n      onUpdated(() => {\r\n        scrollToBottom()\r\n      })\r\n  \r\n      const isSentMessage = (message) => {\r\n        return message.from === props.currentUser._id\r\n      }\r\n  \r\n      const formatTime = (timestamp) => {\r\n        return new Date(timestamp).toLocaleTimeString([], { \r\n          hour: '2-digit', \r\n          minute: '2-digit'\r\n        })\r\n      }\r\n  \r\n      const formatDate = (dateString) => {\r\n        const today = new Date().toLocaleDateString()\r\n        const yesterday = new Date(Date.now() - 86400000).toLocaleDateString()\r\n  \r\n        if (dateString === today) {\r\n          return 'Today'\r\n        } else if (dateString === yesterday) {\r\n          return 'Yesterday'\r\n        }\r\n        return dateString\r\n      }\r\n  \r\n      return {\r\n        messagesContainer,\r\n        groupedMessages,\r\n        isSentMessage,\r\n        formatTime,\r\n        formatDate\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n  }\r\n  \r\n  .chat-messages {\r\n    height: calc(100vh - 300px);\r\n    overflow-y: auto;\r\n    padding: 1rem;\r\n    background-color: #f8f9fa;\r\n  }\r\n  \r\n  .message-group {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .message-date-divider {\r\n    text-align: center;\r\n    margin: 1rem 0;\r\n    position: relative;\r\n    color: #6c757d;\r\n    font-size: 0.875rem;\r\n  }\r\n  \r\n  .message-date-divider::before,\r\n  .message-date-divider::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    width: 45%;\r\n    height: 1px;\r\n    background-color: #dee2e6;\r\n  }\r\n  \r\n  .message-date-divider::before {\r\n    left: 0;\r\n  }\r\n  \r\n  .message-date-divider::after {\r\n    right: 0;\r\n  }\r\n  \r\n  .message {\r\n    margin-bottom: 0.5rem;\r\n    max-width: 70%;\r\n    animation: fadeIn 0.3s ease-in-out;\r\n  }\r\n  \r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n      transform: translateY(10px);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  \r\n  .message-sent {\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .message-received {\r\n    margin-right: auto;\r\n  }\r\n  \r\n  .message-content {\r\n    padding: 0.75rem 1rem;\r\n    border-radius: 1rem;\r\n    position: relative;\r\n    box-shadow: 0 1px 2px rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .message-sent .message-content {\r\n    background-color: #007bff;\r\n    color: white;\r\n    border-bottom-right-radius: 0.25rem;\r\n  }\r\n  \r\n  .message-received .message-content {\r\n    background-color: white;\r\n    border-bottom-left-radius: 0.25rem;\r\n  }\r\n  \r\n  .message-time {\r\n    display: block;\r\n    font-size: 0.75rem;\r\n    margin-top: 0.25rem;\r\n    opacity: 0.7;\r\n  }\r\n  \r\n  /* Scrollbar styling */\r\n  .chat-messages::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-thumb {\r\n    background: #888;\r\n    border-radius: 3px;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-thumb:hover {\r\n    background: #555;\r\n  }\r\n  </style>"],"mappings":";;EACSA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EAFrCC,GAAA;EAG0CF,KAAK,EAAC;;;EAQjCA,KAAK,EAAC;AAAsB;;EAO1BA,KAAK,EAAC;AAAiB;;EAEnBA,KAAK,EAAC;AAAc;;uBAnBrCG,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBOC,MAAA,CAAAC,QAAQ,CAACC,MAAM,U,cAA1BN,mBAAA,CAEM,OAFNO,UAEM,EAFgE,4CAEtE,KALRC,mBAAA,iB,kBAMQR,mBAAA,CAiBMS,SAAA,QAvBdC,WAAA,CAOqCC,MAAA,CAAAC,eAAe,EAPpD,CAOkBC,OAAO,EAAEC,KAAK;yBADxBd,mBAAA,CAiBM;MAfHD,GAAG,EAAEe,KAAK;MACXjB,KAAK,EAAC;QAENK,mBAAA,CAA+D,OAA/Da,UAA+D,EAAAC,gBAAA,CAA1BL,MAAA,CAAAM,UAAU,CAACH,KAAK,oB,kBACrDd,mBAAA,CAUMS,SAAA,QAtBhBC,WAAA,CAa0BG,OAAO,EAAdK,GAAG;2BADZlB,mBAAA,CAUM;QARHD,GAAG,EAAEmB,GAAG,CAACC,GAAG;QACbtB,KAAK,EAfjBuB,eAAA,EAekB,SAAS;UAAA,gBACWT,MAAA,CAAAU,aAAa,CAACH,GAAG;UAAA,qBAAwBP,MAAA,CAAAU,aAAa,CAACH,GAAG;QAAA;UAEpFhB,mBAAA,CAGM,OAHNoB,UAGM,GArBlBC,gBAAA,CAAAP,gBAAA,CAmBiBE,GAAG,CAACM,OAAO,IAAG,GACjB,iBAAAtB,mBAAA,CAAoF,SAApFuB,UAAoF,EAAAT,gBAAA,CAArDL,MAAA,CAAAe,UAAU,CAACR,GAAG,CAACS,SAAS,IAAIT,GAAG,CAACU,SAAS,kB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}