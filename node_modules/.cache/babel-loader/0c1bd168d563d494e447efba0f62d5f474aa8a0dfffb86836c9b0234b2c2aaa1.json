{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport UserList from '../components/chat/UserList.vue';\nimport ChatWindow from '../components/chat/ChatWindow.vue';\nimport MessageInput from '../components/chat/MessageInput.vue';\nimport { initializeSocket } from '../services/socket';\nexport default {\n  name: 'ChatView',\n  components: {\n    UserList,\n    ChatWindow,\n    MessageInput\n  },\n  setup() {\n    const store = useStore();\n    const socket = ref(null);\n    const onlineUsers = ref([]);\n    const selectedUser = ref(null);\n    const messages = ref([]);\n    const isTyping = ref(false);\n    const currentUser = computed(() => store.getters['auth/currentUser']);\n\n    // Fetch messages for selected user\n    const fetchMessages = async userId => {\n      try {\n        const response = await axios.get(`/api/messages/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${currentUser.value.token}`\n          }\n        });\n        messages.value = response.data;\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n\n    // Watch for selected user changes\n    watch(selectedUser, newUser => {\n      if (newUser) {\n        fetchMessages(newUser._id);\n      }\n    });\n    onMounted(async () => {\n      socket.value = await initializeSocket(currentUser.value.token);\n      socket.value.on('users', users => {\n        onlineUsers.value = users.filter(user => user._id !== currentUser.value._id);\n      });\n      socket.value.on('message', message => {\n        // Add timestamp using local time\n        message.timestamp = new Date().toISOString();\n        messages.value.push(message);\n      });\n      socket.value.on('typing', user => {\n        if (selectedUser.value && user._id === selectedUser.value._id) {\n          isTyping.value = true;\n          setTimeout(() => {\n            isTyping.value = false;\n          }, 3000);\n        }\n      });\n\n      // Handle reconnection\n      socket.value.on('connect', () => {\n        if (selectedUser.value) {\n          fetchMessages(selectedUser.value._id);\n        }\n      });\n    });\n    const selectUser = user => {\n      selectedUser.value = user;\n    };\n    const sendMessage = content => {\n      if (!selectedUser.value) return;\n      const message = {\n        from: currentUser.value._id,\n        to: selectedUser.value._id,\n        content,\n        timestamp: new Date().toISOString()\n      };\n      socket.value.emit('send-message', message);\n      messages.value.push(message);\n    };\n    return {\n      onlineUsers,\n      selectedUser,\n      messages,\n      currentUser,\n      isTyping,\n      selectUser,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useStore","UserList","ChatWindow","MessageInput","initializeSocket","name","components","setup","store","socket","onlineUsers","selectedUser","messages","isTyping","currentUser","getters","fetchMessages","userId","response","axios","get","headers","Authorization","value","token","data","error","console","watch","newUser","_id","on","users","filter","user","message","timestamp","Date","toISOString","push","setTimeout","selectUser","sendMessage","content","from","to","emit"],"sources":["E:\\cursor\\client\\src\\views\\Chat.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid mt-4\">\r\n      <div class=\"row\">\r\n        <!-- Users List Sidebar -->\r\n        <div class=\"col-md-3\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"mb-0\">Online Users</h5>\r\n            </div>\r\n            <div class=\"card-body p-0\">\r\n              <user-list \r\n                :users=\"onlineUsers\"\r\n                :selectedUser=\"selectedUser\"\r\n                @select-user=\"selectUser\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Chat Window -->\r\n        <div class=\"col-md-9\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"mb-0\">\r\n                {{ selectedUser ? `Chat with ${selectedUser.username}` : 'Select a user to start chatting' }}\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <chat-window \r\n                v-if=\"selectedUser\"\r\n                :messages=\"messages\"\r\n                :currentUser=\"currentUser\"\r\n                :selectedUser=\"selectedUser\"\r\n              />\r\n              <message-input \r\n                v-if=\"selectedUser\"\r\n                @send-message=\"sendMessage\"\r\n                :isTyping=\"isTyping\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, onMounted, computed } from 'vue'\r\n  import { useStore } from 'vuex'\r\n  import UserList from '../components/chat/UserList.vue'\r\n  import ChatWindow from '../components/chat/ChatWindow.vue'\r\n  import MessageInput from '../components/chat/MessageInput.vue'\r\n  import { initializeSocket } from '../services/socket'\r\n  \r\n  export default {\r\n    name: 'ChatView',\r\n    components: {\r\n      UserList,\r\n      ChatWindow,\r\n      MessageInput\r\n    },\r\n    setup() {\r\n      const store = useStore()\r\n      const socket = ref(null)\r\n      const onlineUsers = ref([])\r\n      const selectedUser = ref(null)\r\n      const messages = ref([])\r\n      const isTyping = ref(false)\r\n      \r\n      const currentUser = computed(() => store.getters['auth/currentUser'])\r\n  \r\n      // Fetch messages for selected user\r\n      const fetchMessages = async (userId) => {\r\n        try {\r\n          const response = await axios.get(`/api/messages/${userId}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${currentUser.value.token}`\r\n            }\r\n          })\r\n          messages.value = response.data\r\n        } catch (error) {\r\n          console.error('Error fetching messages:', error)\r\n        }\r\n      }\r\n  \r\n      // Watch for selected user changes\r\n      watch(selectedUser, (newUser) => {\r\n        if (newUser) {\r\n          fetchMessages(newUser._id)\r\n        }\r\n      })\r\n  \r\n      onMounted(async () => {\r\n        socket.value = await initializeSocket(currentUser.value.token)\r\n        \r\n        socket.value.on('users', (users) => {\r\n          onlineUsers.value = users.filter(user => user._id !== currentUser.value._id)\r\n        })\r\n  \r\n        socket.value.on('message', (message) => {\r\n          // Add timestamp using local time\r\n          message.timestamp = new Date().toISOString()\r\n          messages.value.push(message)\r\n        })\r\n  \r\n        socket.value.on('typing', (user) => {\r\n          if (selectedUser.value && user._id === selectedUser.value._id) {\r\n            isTyping.value = true\r\n            setTimeout(() => { isTyping.value = false }, 3000)\r\n          }\r\n        })\r\n  \r\n        // Handle reconnection\r\n        socket.value.on('connect', () => {\r\n          if (selectedUser.value) {\r\n            fetchMessages(selectedUser.value._id)\r\n          }\r\n        })\r\n      })\r\n  \r\n      const selectUser = (user) => {\r\n        selectedUser.value = user\r\n      }\r\n  \r\n      const sendMessage = (content) => {\r\n        if (!selectedUser.value) return\r\n  \r\n        const message = {\r\n          from: currentUser.value._id,\r\n          to: selectedUser.value._id,\r\n          content,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n  \r\n        socket.value.emit('send-message', message)\r\n        messages.value.push(message)\r\n      }\r\n  \r\n      return {\r\n        onlineUsers,\r\n        selectedUser,\r\n        messages,\r\n        currentUser,\r\n        isTyping,\r\n        selectUser,\r\n        sendMessage\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-body {\r\n    padding: 0;\r\n    height: calc(100vh - 200px);\r\n    overflow: hidden;\r\n  }\r\n  </style>"],"mappings":";;;AA+CE,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAO,QAAS,KAAI;AAC7C,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,QAAO,MAAO,iCAAgC;AACrD,OAAOC,UAAS,MAAO,mCAAkC;AACzD,OAAOC,YAAW,MAAO,qCAAoC;AAC7D,SAASC,gBAAe,QAAS,oBAAmB;AAEpD,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVL,QAAQ;IACRC,UAAU;IACVC;EACF,CAAC;EACDI,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIR,QAAQ,CAAC;IACvB,MAAMS,MAAK,GAAIZ,GAAG,CAAC,IAAI;IACvB,MAAMa,WAAU,GAAIb,GAAG,CAAC,EAAE;IAC1B,MAAMc,YAAW,GAAId,GAAG,CAAC,IAAI;IAC7B,MAAMe,QAAO,GAAIf,GAAG,CAAC,EAAE;IACvB,MAAMgB,QAAO,GAAIhB,GAAG,CAAC,KAAK;IAE1B,MAAMiB,WAAU,GAAIf,QAAQ,CAAC,MAAMS,KAAK,CAACO,OAAO,CAAC,kBAAkB,CAAC;;IAEpE;IACA,MAAMC,aAAY,GAAI,MAAOC,MAAM,IAAK;MACtC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAACC,GAAG,CAAC,iBAAiBH,MAAM,EAAE,EAAE;UAC1DI,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUR,WAAW,CAACS,KAAK,CAACC,KAAK;UAClD;QACF,CAAC;QACDZ,QAAQ,CAACW,KAAI,GAAIL,QAAQ,CAACO,IAAG;MAC/B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;MACjD;IACF;;IAEA;IACAE,KAAK,CAACjB,YAAY,EAAGkB,OAAO,IAAK;MAC/B,IAAIA,OAAO,EAAE;QACXb,aAAa,CAACa,OAAO,CAACC,GAAG;MAC3B;IACF,CAAC;IAEDhC,SAAS,CAAC,YAAY;MACpBW,MAAM,CAACc,KAAI,GAAI,MAAMnB,gBAAgB,CAACU,WAAW,CAACS,KAAK,CAACC,KAAK;MAE7Df,MAAM,CAACc,KAAK,CAACQ,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;QAClCtB,WAAW,CAACa,KAAI,GAAIS,KAAK,CAACC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACJ,GAAE,KAAMhB,WAAW,CAACS,KAAK,CAACO,GAAG;MAC7E,CAAC;MAEDrB,MAAM,CAACc,KAAK,CAACQ,EAAE,CAAC,SAAS,EAAGI,OAAO,IAAK;QACtC;QACAA,OAAO,CAACC,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QAC3C1B,QAAQ,CAACW,KAAK,CAACgB,IAAI,CAACJ,OAAO;MAC7B,CAAC;MAED1B,MAAM,CAACc,KAAK,CAACQ,EAAE,CAAC,QAAQ,EAAGG,IAAI,IAAK;QAClC,IAAIvB,YAAY,CAACY,KAAI,IAAKW,IAAI,CAACJ,GAAE,KAAMnB,YAAY,CAACY,KAAK,CAACO,GAAG,EAAE;UAC7DjB,QAAQ,CAACU,KAAI,GAAI,IAAG;UACpBiB,UAAU,CAAC,MAAM;YAAE3B,QAAQ,CAACU,KAAI,GAAI,KAAI;UAAE,CAAC,EAAE,IAAI;QACnD;MACF,CAAC;;MAED;MACAd,MAAM,CAACc,KAAK,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;QAC/B,IAAIpB,YAAY,CAACY,KAAK,EAAE;UACtBP,aAAa,CAACL,YAAY,CAACY,KAAK,CAACO,GAAG;QACtC;MACF,CAAC;IACH,CAAC;IAED,MAAMW,UAAS,GAAKP,IAAI,IAAK;MAC3BvB,YAAY,CAACY,KAAI,GAAIW,IAAG;IAC1B;IAEA,MAAMQ,WAAU,GAAKC,OAAO,IAAK;MAC/B,IAAI,CAAChC,YAAY,CAACY,KAAK,EAAE;MAEzB,MAAMY,OAAM,GAAI;QACdS,IAAI,EAAE9B,WAAW,CAACS,KAAK,CAACO,GAAG;QAC3Be,EAAE,EAAElC,YAAY,CAACY,KAAK,CAACO,GAAG;QAC1Ba,OAAO;QACPP,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC;MAEA7B,MAAM,CAACc,KAAK,CAACuB,IAAI,CAAC,cAAc,EAAEX,OAAO;MACzCvB,QAAQ,CAACW,KAAK,CAACgB,IAAI,CAACJ,OAAO;IAC7B;IAEA,OAAO;MACLzB,WAAW;MACXC,YAAY;MACZC,QAAQ;MACRE,WAAW;MACXD,QAAQ;MACR4B,UAAU;MACVC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}