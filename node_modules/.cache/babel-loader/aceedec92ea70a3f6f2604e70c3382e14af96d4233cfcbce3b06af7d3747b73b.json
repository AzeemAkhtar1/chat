{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container-fluid mt-4\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nconst _hoisted_3 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_4 = {\n  class: \"card\"\n};\nconst _hoisted_5 = {\n  class: \"card-body p-0\"\n};\nconst _hoisted_6 = {\n  class: \"col-md-9\"\n};\nconst _hoisted_7 = {\n  class: \"card\"\n};\nconst _hoisted_8 = {\n  class: \"card-header bg-primary text-white\"\n};\nconst _hoisted_9 = {\n  class: \"mb-0\"\n};\nconst _hoisted_10 = {\n  class: \"card-body chat-body\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_user_list = _resolveComponent(\"user-list\");\n  const _component_chat_window = _resolveComponent(\"chat-window\");\n  const _component_message_input = _resolveComponent(\"message-input\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Users List Sidebar \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", {\n    class: \"mb-0\"\n  }, \"Online Users\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_user_list, {\n    users: $setup.onlineUsers,\n    selectedUser: $setup.selectedUser,\n    onSelectUser: $setup.selectUser\n  }, null, 8 /* PROPS */, [\"users\", \"selectedUser\", \"onSelectUser\"])])])]), _createCommentVNode(\" Chat Window \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"h5\", _hoisted_9, _toDisplayString($setup.selectedUser ? `Chat with ${$setup.selectedUser.username}` : 'Select a user to start chatting'), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_10, [$setup.selectedUser ? (_openBlock(), _createBlock(_component_chat_window, {\n    key: 0,\n    messages: $setup.messages,\n    currentUser: $setup.currentUser,\n    selectedUser: $setup.selectedUser\n  }, null, 8 /* PROPS */, [\"messages\", \"currentUser\", \"selectedUser\"])) : _createCommentVNode(\"v-if\", true), $setup.selectedUser ? (_openBlock(), _createBlock(_component_message_input, {\n    key: 1,\n    onSendMessage: $setup.sendMessage,\n    isTyping: $setup.isTyping\n  }, null, 8 /* PROPS */, [\"onSendMessage\", \"isTyping\"])) : _createCommentVNode(\"v-if\", true)])])])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_hoisted_5","_createVNode","_component_user_list","users","$setup","onlineUsers","selectedUser","onSelectUser","selectUser","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_toDisplayString","username","_hoisted_10","_createBlock","_component_chat_window","key","messages","currentUser","_component_message_input","onSendMessage","sendMessage","isTyping"],"sources":["E:\\cursor\\client\\src\\views\\Chat.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid mt-4\">\r\n      <div class=\"row\">\r\n        <!-- Users List Sidebar -->\r\n        <div class=\"col-md-3\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"mb-0\">Online Users</h5>\r\n            </div>\r\n            <div class=\"card-body p-0\">\r\n              <user-list \r\n                :users=\"onlineUsers\"\r\n                :selectedUser=\"selectedUser\"\r\n                @select-user=\"selectUser\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Chat Window -->\r\n        <div class=\"col-md-9\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header bg-primary text-white\">\r\n              <h5 class=\"mb-0\">\r\n                {{ selectedUser ? `Chat with ${selectedUser.username}` : 'Select a user to start chatting' }}\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body chat-body\">\r\n              <chat-window \r\n                v-if=\"selectedUser\"\r\n                :messages=\"messages\"\r\n                :currentUser=\"currentUser\"\r\n                :selectedUser=\"selectedUser\"\r\n              />\r\n              <message-input \r\n                v-if=\"selectedUser\"\r\n                @send-message=\"sendMessage\"\r\n                :isTyping=\"isTyping\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, onMounted, computed, watch } from 'vue'\r\n  import { useStore } from 'vuex'\r\n  import UserList from '../components/chat/UserList.vue'\r\n  import ChatWindow from '../components/chat/ChatWindow.vue'\r\n  import MessageInput from '../components/chat/MessageInput.vue'\r\n  import { initializeSocket } from '../services/socket'\r\n  import axios from 'axios'\r\n  \r\n  export default {\r\n    name: 'ChatView',\r\n    components: {\r\n      UserList,\r\n      ChatWindow,\r\n      MessageInput\r\n    },\r\n    setup() {\r\n      const store = useStore()\r\n      const socket = ref(null)\r\n      const onlineUsers = ref([])\r\n      const selectedUser = ref(null)\r\n      const messages = ref([])\r\n      const isTyping = ref(false)\r\n      \r\n      const currentUser = computed(() => store.getters['auth/currentUser'])\r\n  \r\n      // Fetch messages for selected user\r\n      const fetchMessages = async (userId) => {\r\n        try {\r\n          const response = await axios.get(`/api/messages/${userId}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${currentUser.value.token}`\r\n            }\r\n          })\r\n          messages.value = response.data\r\n        } catch (error) {\r\n          console.error('Error fetching messages:', error)\r\n        }\r\n      }\r\n  \r\n      // Watch for selected user changes\r\n      watch(selectedUser, (newUser) => {\r\n        if (newUser) {\r\n          fetchMessages(newUser._id)\r\n        }\r\n      })\r\n  \r\n      onMounted(async () => {\r\n        socket.value = await initializeSocket(currentUser.value.token)\r\n        \r\n        socket.value.on('users', (users) => {\r\n          onlineUsers.value = users.filter(user => user._id !== currentUser.value._id)\r\n        })\r\n  \r\n        socket.value.on('message', (message) => {\r\n          // Add timestamp using local time\r\n          message.timestamp = new Date().toISOString()\r\n          messages.value.push(message)\r\n        })\r\n  \r\n        socket.value.on('typing', (user) => {\r\n          if (selectedUser.value && user._id === selectedUser.value._id) {\r\n            isTyping.value = true\r\n            setTimeout(() => { isTyping.value = false }, 3000)\r\n          }\r\n        })\r\n  \r\n        // Handle reconnection\r\n        socket.value.on('connect', () => {\r\n          if (selectedUser.value) {\r\n            fetchMessages(selectedUser.value._id)\r\n          }\r\n        })\r\n      })\r\n  \r\n      const selectUser = (user) => {\r\n        selectedUser.value = user\r\n      }\r\n  \r\n      const sendMessage = (content) => {\r\n        if (!selectedUser.value) return\r\n  \r\n        const message = {\r\n          from: currentUser.value._id,\r\n          to: selectedUser.value._id,\r\n          content,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n  \r\n        socket.value.emit('send-message', message)\r\n        messages.value.push(message)\r\n      }\r\n  \r\n      return {\r\n        onlineUsers,\r\n        selectedUser,\r\n        messages,\r\n        currentUser,\r\n        isTyping,\r\n        selectUser,\r\n        sendMessage\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-body {\r\n    padding: 0;\r\n    height: calc(100vh - 200px);\r\n    overflow: hidden;\r\n  }\r\n  </style>"],"mappings":";;EACSA,KAAK,EAAC;AAAsB;;EAC1BA,KAAK,EAAC;AAAK;;EAETA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAM;;EAIVA,KAAK,EAAC;AAAe;;EAWzBA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAmC;;EACxCA,KAAK,EAAC;AAAM;;EAIbA,KAAK,EAAC;AAAqB;;;;;uBA1BxCC,mBAAA,CA0CM,OA1CNC,UA0CM,GAzCJC,mBAAA,CAwCM,OAxCNC,UAwCM,GAvCJC,mBAAA,wBAA2B,EAC3BF,mBAAA,CAaM,OAbNG,UAaM,GAZJH,mBAAA,CAWM,OAXNI,UAWM,G,0BAVJJ,mBAAA,CAEM;IAFDH,KAAK,EAAC;EAAa,IACtBG,mBAAA,CAAkC;IAA9BH,KAAK,EAAC;EAAM,GAAC,cAAY,E,sBAE/BG,mBAAA,CAMM,OANNK,UAMM,GALJC,YAAA,CAIEC,oBAAA;IAHCC,KAAK,EAAEC,MAAA,CAAAC,WAAW;IAClBC,YAAY,EAAEF,MAAA,CAAAE,YAAY;IAC1BC,YAAW,EAAEH,MAAA,CAAAI;4EAMtBX,mBAAA,iBAAoB,EACpBF,mBAAA,CAqBM,OArBNc,UAqBM,GApBJd,mBAAA,CAmBM,OAnBNe,UAmBM,GAlBJf,mBAAA,CAIM,OAJNgB,UAIM,GAHJhB,mBAAA,CAEK,MAFLiB,UAEK,EAAAC,gBAAA,CADAT,MAAA,CAAAE,YAAY,gBAAgBF,MAAA,CAAAE,YAAY,CAACQ,QAAQ,uD,GAGxDnB,mBAAA,CAYM,OAZNoB,WAYM,GAVIX,MAAA,CAAAE,YAAY,I,cADpBU,YAAA,CAKEC,sBAAA;IAjChBC,GAAA;IA8BiBC,QAAQ,EAAEf,MAAA,CAAAe,QAAQ;IAClBC,WAAW,EAAEhB,MAAA,CAAAgB,WAAW;IACxBd,YAAY,EAAEF,MAAA,CAAAE;0EAhC/BT,mBAAA,gBAmCsBO,MAAA,CAAAE,YAAY,I,cADpBU,YAAA,CAIEK,wBAAA;IAtChBH,GAAA;IAoCiBI,aAAY,EAAElB,MAAA,CAAAmB,WAAW;IACzBC,QAAQ,EAAEpB,MAAA,CAAAoB;4DArC3B3B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}