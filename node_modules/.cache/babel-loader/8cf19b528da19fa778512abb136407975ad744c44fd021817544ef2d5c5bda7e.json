{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport UserList from '../components/chat/UserList.vue';\nimport ChatWindow from '../components/chat/ChatWindow.vue';\nimport MessageInput from '../components/chat/MessageInput.vue';\nimport { initializeSocket } from '../services/socket';\nexport default {\n  name: 'ChatView',\n  components: {\n    UserList,\n    ChatWindow,\n    MessageInput\n  },\n  setup() {\n    const store = useStore();\n    const socket = ref(null);\n    const onlineUsers = ref([]);\n    const selectedUser = ref(null);\n    const messages = ref([]);\n    const isTyping = ref(false);\n    const currentUser = computed(() => store.getters['auth/currentUser']);\n    onMounted(async () => {\n      socket.value = await initializeSocket(currentUser.value.token);\n      socket.value.on('users', users => {\n        onlineUsers.value = users.filter(user => user._id !== currentUser.value._id);\n      });\n      socket.value.on('message', message => {\n        messages.value.push(message);\n      });\n      socket.value.on('message-history', history => {\n        messages.value = history;\n      });\n      socket.value.on('typing', user => {\n        if (selectedUser.value && user._id === selectedUser.value._id) {\n          isTyping.value = true;\n          setTimeout(() => {\n            isTyping.value = false;\n          }, 3000);\n        }\n      });\n    });\n    const selectUser = user => {\n      selectedUser.value = user;\n      messages.value = [];\n      socket.value.emit('get-messages', {\n        from: currentUser.value._id,\n        to: user._id\n      });\n    };\n    const sendMessage = content => {\n      if (!selectedUser.value) return;\n      const message = {\n        from: currentUser.value._id,\n        to: selectedUser.value._id,\n        content,\n        timestamp: new Date()\n      };\n      socket.value.emit('send-message', message);\n      messages.value.push(message);\n    };\n    return {\n      onlineUsers,\n      selectedUser,\n      messages,\n      currentUser,\n      isTyping,\n      selectUser,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useStore","UserList","ChatWindow","MessageInput","initializeSocket","name","components","setup","store","socket","onlineUsers","selectedUser","messages","isTyping","currentUser","getters","value","token","on","users","filter","user","_id","message","push","history","setTimeout","selectUser","emit","from","to","sendMessage","content","timestamp","Date"],"sources":["C:\\Users\\Admin\\Downloads\\chat-app-client-master\\chat-app-client-master\\src\\views\\Chat.vue"],"sourcesContent":["<template>\n    <div class=\"container-fluid mt-4\">\n      <div class=\"row\">\n        <!-- Users List Sidebar -->\n        <div class=\"col-md-3\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <h5 class=\"mb-0\">Online Users</h5>\n            </div>\n            <div class=\"card-body p-0\">\n              <user-list \n                :users=\"onlineUsers\"\n                :selectedUser=\"selectedUser\"\n                @select-user=\"selectUser\"\n              />\n            </div>\n          </div>\n        </div>\n  \n        <!-- Chat Window -->\n        <div class=\"col-md-9\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <h5 class=\"mb-0\">\n                {{ selectedUser ? `Chat with ${selectedUser.username}` : 'Select a user to start chatting' }}\n              </h5>\n            </div>\n            <div class=\"card-body\">\n              <chat-window \n                v-if=\"selectedUser\"\n                :messages=\"messages\"\n                :currentUser=\"currentUser\"\n                :selectedUser=\"selectedUser\"\n              />\n              <message-input \n                v-if=\"selectedUser\"\n                @send-message=\"sendMessage\"\n                :isTyping=\"isTyping\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted, computed } from 'vue'\n  import { useStore } from 'vuex'\n  import UserList from '../components/chat/UserList.vue'\n  import ChatWindow from '../components/chat/ChatWindow.vue'\n  import MessageInput from '../components/chat/MessageInput.vue'\n  import { initializeSocket } from '../services/socket'\n  \n  export default {\n    name: 'ChatView',\n    components: {\n      UserList,\n      ChatWindow,\n      MessageInput\n    },\n    setup() {\n      const store = useStore()\n      const socket = ref(null)\n      const onlineUsers = ref([])\n      const selectedUser = ref(null)\n      const messages = ref([])\n      const isTyping = ref(false)\n      \n      const currentUser = computed(() => store.getters['auth/currentUser'])\n  \n      onMounted(async () => {\n        socket.value = await initializeSocket(currentUser.value.token)\n        \n        socket.value.on('users', (users) => {\n          onlineUsers.value = users.filter(user => user._id !== currentUser.value._id)\n        })\n  \n        socket.value.on('message', (message) => {\n          messages.value.push(message)\n        })\n  \n        socket.value.on('message-history', (history) => {\n          messages.value = history\n        })\n  \n        socket.value.on('typing', (user) => {\n          if (selectedUser.value && user._id === selectedUser.value._id) {\n            isTyping.value = true\n            setTimeout(() => { isTyping.value = false }, 3000)\n          }\n        })\n      })\n  \n      const selectUser = (user) => {\n        selectedUser.value = user\n        messages.value = []\n        socket.value.emit('get-messages', {\n          from: currentUser.value._id,\n          to: user._id\n        })\n      }\n  \n      const sendMessage = (content) => {\n        if (!selectedUser.value) return\n  \n        const message = {\n          from: currentUser.value._id,\n          to: selectedUser.value._id,\n          content,\n          timestamp: new Date()\n        }\n  \n        socket.value.emit('send-message', message)\n        messages.value.push(message)\n      }\n  \n      return {\n        onlineUsers,\n        selectedUser,\n        messages,\n        currentUser,\n        isTyping,\n        selectUser,\n        sendMessage\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .chat-body {\n    padding: 0;\n    height: calc(100vh - 200px);\n    overflow: hidden;\n  }\n  </style>"],"mappings":";;;AA+CE,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAO,QAAS,KAAI;AAC7C,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,QAAO,MAAO,iCAAgC;AACrD,OAAOC,UAAS,MAAO,mCAAkC;AACzD,OAAOC,YAAW,MAAO,qCAAoC;AAC7D,SAASC,gBAAe,QAAS,oBAAmB;AAEpD,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVL,QAAQ;IACRC,UAAU;IACVC;EACF,CAAC;EACDI,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIR,QAAQ,CAAC;IACvB,MAAMS,MAAK,GAAIZ,GAAG,CAAC,IAAI;IACvB,MAAMa,WAAU,GAAIb,GAAG,CAAC,EAAE;IAC1B,MAAMc,YAAW,GAAId,GAAG,CAAC,IAAI;IAC7B,MAAMe,QAAO,GAAIf,GAAG,CAAC,EAAE;IACvB,MAAMgB,QAAO,GAAIhB,GAAG,CAAC,KAAK;IAE1B,MAAMiB,WAAU,GAAIf,QAAQ,CAAC,MAAMS,KAAK,CAACO,OAAO,CAAC,kBAAkB,CAAC;IAEpEjB,SAAS,CAAC,YAAY;MACpBW,MAAM,CAACO,KAAI,GAAI,MAAMZ,gBAAgB,CAACU,WAAW,CAACE,KAAK,CAACC,KAAK;MAE7DR,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;QAClCT,WAAW,CAACM,KAAI,GAAIG,KAAK,CAACC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,GAAE,KAAMR,WAAW,CAACE,KAAK,CAACM,GAAG;MAC7E,CAAC;MAEDb,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,SAAS,EAAGK,OAAO,IAAK;QACtCX,QAAQ,CAACI,KAAK,CAACQ,IAAI,CAACD,OAAO;MAC7B,CAAC;MAEDd,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,iBAAiB,EAAGO,OAAO,IAAK;QAC9Cb,QAAQ,CAACI,KAAI,GAAIS,OAAM;MACzB,CAAC;MAEDhB,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,QAAQ,EAAGG,IAAI,IAAK;QAClC,IAAIV,YAAY,CAACK,KAAI,IAAKK,IAAI,CAACC,GAAE,KAAMX,YAAY,CAACK,KAAK,CAACM,GAAG,EAAE;UAC7DT,QAAQ,CAACG,KAAI,GAAI,IAAG;UACpBU,UAAU,CAAC,MAAM;YAAEb,QAAQ,CAACG,KAAI,GAAI,KAAI;UAAE,CAAC,EAAE,IAAI;QACnD;MACF,CAAC;IACH,CAAC;IAED,MAAMW,UAAS,GAAKN,IAAI,IAAK;MAC3BV,YAAY,CAACK,KAAI,GAAIK,IAAG;MACxBT,QAAQ,CAACI,KAAI,GAAI,EAAC;MAClBP,MAAM,CAACO,KAAK,CAACY,IAAI,CAAC,cAAc,EAAE;QAChCC,IAAI,EAAEf,WAAW,CAACE,KAAK,CAACM,GAAG;QAC3BQ,EAAE,EAAET,IAAI,CAACC;MACX,CAAC;IACH;IAEA,MAAMS,WAAU,GAAKC,OAAO,IAAK;MAC/B,IAAI,CAACrB,YAAY,CAACK,KAAK,EAAE;MAEzB,MAAMO,OAAM,GAAI;QACdM,IAAI,EAAEf,WAAW,CAACE,KAAK,CAACM,GAAG;QAC3BQ,EAAE,EAAEnB,YAAY,CAACK,KAAK,CAACM,GAAG;QAC1BU,OAAO;QACPC,SAAS,EAAE,IAAIC,IAAI,CAAC;MACtB;MAEAzB,MAAM,CAACO,KAAK,CAACY,IAAI,CAAC,cAAc,EAAEL,OAAO;MACzCX,QAAQ,CAACI,KAAK,CAACQ,IAAI,CAACD,OAAO;IAC7B;IAEA,OAAO;MACLb,WAAW;MACXC,YAAY;MACZC,QAAQ;MACRE,WAAW;MACXD,QAAQ;MACRc,UAAU;MACVI;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}