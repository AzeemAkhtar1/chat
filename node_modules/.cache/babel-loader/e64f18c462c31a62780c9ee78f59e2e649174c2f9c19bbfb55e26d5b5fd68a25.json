{"ast":null,"code":"import { onMounted, onUpdated, ref } from 'vue';\nexport default {\n  name: 'ChatWindow',\n  props: {\n    messages: {\n      type: Array,\n      required: true\n    },\n    currentUser: {\n      type: Object,\n      required: true\n    },\n    selectedUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const messagesContainer = ref(null);\n    const scrollToBottom = () => {\n      if (messagesContainer.value) {\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n      }\n    };\n    onMounted(() => {\n      scrollToBottom();\n    });\n    onUpdated(() => {\n      scrollToBottom();\n    });\n    const isSentMessage = message => {\n      return message.from === props.currentUser._id;\n    };\n    const formatTime = timestamp => {\n      return new Date(timestamp).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n    return {\n      messagesContainer,\n      isSentMessage,\n      formatTime\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUpdated","ref","name","props","messages","type","Array","required","currentUser","Object","selectedUser","setup","messagesContainer","scrollToBottom","value","scrollTop","scrollHeight","isSentMessage","message","from","_id","formatTime","timestamp","Date","toLocaleTimeString","hour","minute"],"sources":["E:\\cursor\\client\\src\\components\\chat\\ChatWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n    <div v-if=\"messages.length === 0\" class=\"text-center text-muted my-4\">\r\n      No messages yet. Start the conversation!\r\n    </div>\r\n    <div \r\n      v-for=\"(message, index) in messages\" \r\n      :key=\"index\"\r\n      class=\"message\"\r\n      :class=\"{ 'message-sent': isSentMessage(message), 'message-received': !isSentMessage(message) }\"\r\n    >\r\n      <div class=\"message-content\">\r\n        {{ message.content }}\r\n        <small class=\"message-time\">{{ formatTime(message.timestamp || message.createdAt) }}</small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, onUpdated, ref } from 'vue'\r\n\r\nexport default {\r\n  name: 'ChatWindow',\r\n  props: {\r\n    messages: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    selectedUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const messagesContainer = ref(null)\r\n\r\n    const scrollToBottom = () => {\r\n      if (messagesContainer.value) {\r\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      scrollToBottom()\r\n    })\r\n\r\n    onUpdated(() => {\r\n      scrollToBottom()\r\n    })\r\n\r\n    const isSentMessage = (message) => {\r\n      return message.from === props.currentUser._id\r\n    }\r\n\r\n    const formatTime = (timestamp) => {\r\n      return new Date(timestamp).toLocaleTimeString([], { \r\n        hour: '2-digit', \r\n        minute: '2-digit' \r\n      })\r\n    }\r\n\r\n    return {\r\n      messagesContainer,\r\n      isSentMessage,\r\n      formatTime\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-messages {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  padding: 1rem;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 1rem;\r\n  max-width: 70%;\r\n}\r\n\r\n.message-sent {\r\n  margin-left: auto;\r\n}\r\n\r\n.message-received {\r\n  margin-right: auto;\r\n}\r\n\r\n.message-content {\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 1rem;\r\n  position: relative;\r\n}\r\n\r\n.message-sent .message-content {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.message-received .message-content {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.message-time {\r\n  display: block;\r\n  font-size: 0.75rem;\r\n  margin-top: 0.25rem;\r\n  opacity: 0.7;\r\n}\r\n</style>"],"mappings":"AAoBA,SAASA,SAAS,EAAEC,SAAS,EAAEC,GAAE,QAAS,KAAI;AAE9C,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDC,WAAW,EAAE;MACXH,IAAI,EAAEI,MAAM;MACZF,QAAQ,EAAE;IACZ,CAAC;IACDG,YAAY,EAAE;MACZL,IAAI,EAAEI,MAAM;MACZF,QAAQ,EAAE;IACZ;EACF,CAAC;EACDI,KAAKA,CAACR,KAAK,EAAE;IACX,MAAMS,iBAAgB,GAAIX,GAAG,CAAC,IAAI;IAElC,MAAMY,cAAa,GAAIA,CAAA,KAAM;MAC3B,IAAID,iBAAiB,CAACE,KAAK,EAAE;QAC3BF,iBAAiB,CAACE,KAAK,CAACC,SAAQ,GAAIH,iBAAiB,CAACE,KAAK,CAACE,YAAW;MACzE;IACF;IAEAjB,SAAS,CAAC,MAAM;MACdc,cAAc,CAAC;IACjB,CAAC;IAEDb,SAAS,CAAC,MAAM;MACda,cAAc,CAAC;IACjB,CAAC;IAED,MAAMI,aAAY,GAAKC,OAAO,IAAK;MACjC,OAAOA,OAAO,CAACC,IAAG,KAAMhB,KAAK,CAACK,WAAW,CAACY,GAAE;IAC9C;IAEA,MAAMC,UAAS,GAAKC,SAAS,IAAK;MAChC,OAAO,IAAIC,IAAI,CAACD,SAAS,CAAC,CAACE,kBAAkB,CAAC,EAAE,EAAE;QAChDC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC;IACH;IAEA,OAAO;MACLd,iBAAiB;MACjBK,aAAa;MACbI;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}