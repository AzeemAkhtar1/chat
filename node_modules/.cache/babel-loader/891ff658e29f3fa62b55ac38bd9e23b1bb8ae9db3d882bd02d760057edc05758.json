{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport UserList from '../components/chat/UserList.vue';\nimport ChatWindow from '../components/chat/ChatWindow.vue';\nimport MessageInput from '../components/chat/MessageInput.vue';\nimport { initializeSocket } from '../services/socket';\nexport default {\n  name: 'ChatView',\n  components: {\n    UserList,\n    ChatWindow,\n    MessageInput\n  },\n  setup() {\n    const store = useStore();\n    const socket = ref(null);\n    const onlineUsers = ref([]);\n    const selectedUser = ref(null);\n    const messages = ref([]);\n    const isTyping = ref(false);\n    const currentUser = computed(() => store.getters['auth/currentUser']);\n    onMounted(async () => {\n      socket.value = await initializeSocket(currentUser.value.token);\n      socket.value.on('users', users => {\n        onlineUsers.value = users.filter(user => user._id !== currentUser.value._id);\n      });\n      socket.value.on('message', message => {\n        messages.value.push(message);\n      });\n      socket.value.on('typing', user => {\n        if (selectedUser.value && user._id === selectedUser.value._id) {\n          isTyping.value = true;\n          setTimeout(() => {\n            isTyping.value = false;\n          }, 3000);\n        }\n      });\n    });\n    const selectUser = user => {\n      selectedUser.value = user;\n      messages.value = []; // Clear messages when switching users\n      // Load previous messages\n      socket.value.emit('get-messages', {\n        from: currentUser.value._id,\n        to: user._id\n      });\n    };\n    const sendMessage = content => {\n      if (!selectedUser.value) return;\n      const message = {\n        from: currentUser.value._id,\n        to: selectedUser.value._id,\n        content,\n        timestamp: new Date()\n      };\n      socket.value.emit('send-message', message);\n      messages.value.push(message);\n    };\n    return {\n      onlineUsers,\n      selectedUser,\n      messages,\n      currentUser,\n      isTyping,\n      selectUser,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useStore","UserList","ChatWindow","MessageInput","initializeSocket","name","components","setup","store","socket","onlineUsers","selectedUser","messages","isTyping","currentUser","getters","value","token","on","users","filter","user","_id","message","push","setTimeout","selectUser","emit","from","to","sendMessage","content","timestamp","Date"],"sources":["E:\\cursor\\client\\src\\views\\Chat.vue"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid mt-4\">\r\n    <div class=\"row\">\r\n      <!-- Users List Sidebar -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">Online Users</h5>\r\n          </div>\r\n          <div class=\"card-body p-0\">\r\n            <user-list \r\n              :users=\"onlineUsers\"\r\n              :selectedUser=\"selectedUser\"\r\n              @select-user=\"selectUser\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Chat Window -->\r\n      <div class=\"col-md-9\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              {{ selectedUser ? `Chat with ${selectedUser.username}` : 'Select a user to start chatting' }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <chat-window \r\n              v-if=\"selectedUser\"\r\n              :messages=\"messages\"\r\n              :currentUser=\"currentUser\"\r\n              :selectedUser=\"selectedUser\"\r\n            />\r\n            <message-input \r\n              v-if=\"selectedUser\"\r\n              @send-message=\"sendMessage\"\r\n              :isTyping=\"isTyping\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport UserList from '../components/chat/UserList.vue'\r\nimport ChatWindow from '../components/chat/ChatWindow.vue'\r\nimport MessageInput from '../components/chat/MessageInput.vue'\r\nimport { initializeSocket } from '../services/socket'\r\n\r\nexport default {\r\n  name: 'ChatView',\r\n  components: {\r\n    UserList,\r\n    ChatWindow,\r\n    MessageInput\r\n  },\r\n  setup() {\r\n    const store = useStore()\r\n    const socket = ref(null)\r\n    const onlineUsers = ref([])\r\n    const selectedUser = ref(null)\r\n    const messages = ref([])\r\n    const isTyping = ref(false)\r\n    \r\n    const currentUser = computed(() => store.getters['auth/currentUser'])\r\n\r\n    onMounted(async () => {\r\n      socket.value = await initializeSocket(currentUser.value.token)\r\n      \r\n      socket.value.on('users', (users) => {\r\n        onlineUsers.value = users.filter(user => user._id !== currentUser.value._id)\r\n      })\r\n\r\n      socket.value.on('message', (message) => {\r\n        messages.value.push(message)\r\n      })\r\n\r\n      socket.value.on('typing', (user) => {\r\n        if (selectedUser.value && user._id === selectedUser.value._id) {\r\n          isTyping.value = true\r\n          setTimeout(() => { isTyping.value = false }, 3000)\r\n        }\r\n      })\r\n    })\r\n\r\n    const selectUser = (user) => {\r\n      selectedUser.value = user\r\n      messages.value = [] // Clear messages when switching users\r\n      // Load previous messages\r\n      socket.value.emit('get-messages', {\r\n        from: currentUser.value._id,\r\n        to: user._id\r\n      })\r\n    }\r\n\r\n    const sendMessage = (content) => {\r\n      if (!selectedUser.value) return\r\n\r\n      const message = {\r\n        from: currentUser.value._id,\r\n        to: selectedUser.value._id,\r\n        content,\r\n        timestamp: new Date()\r\n      }\r\n\r\n      socket.value.emit('send-message', message)\r\n      messages.value.push(message)\r\n    }\r\n\r\n    return {\r\n      onlineUsers,\r\n      selectedUser,\r\n      messages,\r\n      currentUser,\r\n      isTyping,\r\n      selectUser,\r\n      sendMessage\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;;AA+CA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAO,QAAS,KAAI;AAC7C,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,QAAO,MAAO,iCAAgC;AACrD,OAAOC,UAAS,MAAO,mCAAkC;AACzD,OAAOC,YAAW,MAAO,qCAAoC;AAC7D,SAASC,gBAAe,QAAS,oBAAmB;AAEpD,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVL,QAAQ;IACRC,UAAU;IACVC;EACF,CAAC;EACDI,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIR,QAAQ,CAAC;IACvB,MAAMS,MAAK,GAAIZ,GAAG,CAAC,IAAI;IACvB,MAAMa,WAAU,GAAIb,GAAG,CAAC,EAAE;IAC1B,MAAMc,YAAW,GAAId,GAAG,CAAC,IAAI;IAC7B,MAAMe,QAAO,GAAIf,GAAG,CAAC,EAAE;IACvB,MAAMgB,QAAO,GAAIhB,GAAG,CAAC,KAAK;IAE1B,MAAMiB,WAAU,GAAIf,QAAQ,CAAC,MAAMS,KAAK,CAACO,OAAO,CAAC,kBAAkB,CAAC;IAEpEjB,SAAS,CAAC,YAAY;MACpBW,MAAM,CAACO,KAAI,GAAI,MAAMZ,gBAAgB,CAACU,WAAW,CAACE,KAAK,CAACC,KAAK;MAE7DR,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;QAClCT,WAAW,CAACM,KAAI,GAAIG,KAAK,CAACC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,GAAE,KAAMR,WAAW,CAACE,KAAK,CAACM,GAAG;MAC7E,CAAC;MAEDb,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,SAAS,EAAGK,OAAO,IAAK;QACtCX,QAAQ,CAACI,KAAK,CAACQ,IAAI,CAACD,OAAO;MAC7B,CAAC;MAEDd,MAAM,CAACO,KAAK,CAACE,EAAE,CAAC,QAAQ,EAAGG,IAAI,IAAK;QAClC,IAAIV,YAAY,CAACK,KAAI,IAAKK,IAAI,CAACC,GAAE,KAAMX,YAAY,CAACK,KAAK,CAACM,GAAG,EAAE;UAC7DT,QAAQ,CAACG,KAAI,GAAI,IAAG;UACpBS,UAAU,CAAC,MAAM;YAAEZ,QAAQ,CAACG,KAAI,GAAI,KAAI;UAAE,CAAC,EAAE,IAAI;QACnD;MACF,CAAC;IACH,CAAC;IAED,MAAMU,UAAS,GAAKL,IAAI,IAAK;MAC3BV,YAAY,CAACK,KAAI,GAAIK,IAAG;MACxBT,QAAQ,CAACI,KAAI,GAAI,EAAC,EAAE;MACpB;MACAP,MAAM,CAACO,KAAK,CAACW,IAAI,CAAC,cAAc,EAAE;QAChCC,IAAI,EAAEd,WAAW,CAACE,KAAK,CAACM,GAAG;QAC3BO,EAAE,EAAER,IAAI,CAACC;MACX,CAAC;IACH;IAEA,MAAMQ,WAAU,GAAKC,OAAO,IAAK;MAC/B,IAAI,CAACpB,YAAY,CAACK,KAAK,EAAE;MAEzB,MAAMO,OAAM,GAAI;QACdK,IAAI,EAAEd,WAAW,CAACE,KAAK,CAACM,GAAG;QAC3BO,EAAE,EAAElB,YAAY,CAACK,KAAK,CAACM,GAAG;QAC1BS,OAAO;QACPC,SAAS,EAAE,IAAIC,IAAI,CAAC;MACtB;MAEAxB,MAAM,CAACO,KAAK,CAACW,IAAI,CAAC,cAAc,EAAEJ,OAAO;MACzCX,QAAQ,CAACI,KAAK,CAACQ,IAAI,CAACD,OAAO;IAC7B;IAEA,OAAO;MACLb,WAAW;MACXC,YAAY;MACZC,QAAQ;MACRE,WAAW;MACXD,QAAQ;MACRa,UAAU;MACVI;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}