{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-center text-muted my-4\"\n};\nconst _hoisted_3 = {\n  class: \"message-content\"\n};\nconst _hoisted_4 = {\n  class: \"message-time\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$props.messages.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \" No messages yet. Start the conversation! \")) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"message\", {\n        'message-sent': $setup.isSentMessage(message),\n        'message-received': !$setup.isSentMessage(message)\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createTextVNode(_toDisplayString(message.content) + \" \", 1 /* TEXT */), _createElementVNode(\"small\", _hoisted_4, _toDisplayString($setup.formatTime(message.timestamp || message.createdAt)), 1 /* TEXT */)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","$props","messages","length","_hoisted_2","_createCommentVNode","_Fragment","_renderList","message","index","_normalizeClass","$setup","isSentMessage","_createElementVNode","_hoisted_3","_createTextVNode","_toDisplayString","content","_hoisted_4","formatTime","timestamp","createdAt"],"sources":["E:\\cursor\\client\\src\\components\\chat\\ChatWindow.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n    <div v-if=\"messages.length === 0\" class=\"text-center text-muted my-4\">\r\n      No messages yet. Start the conversation!\r\n    </div>\r\n    <div \r\n      v-for=\"(message, index) in messages\" \r\n      :key=\"index\"\r\n      class=\"message\"\r\n      :class=\"{ 'message-sent': isSentMessage(message), 'message-received': !isSentMessage(message) }\"\r\n    >\r\n      <div class=\"message-content\">\r\n        {{ message.content }}\r\n        <small class=\"message-time\">{{ formatTime(message.timestamp || message.createdAt) }}</small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, onUpdated, ref } from 'vue'\r\n\r\nexport default {\r\n  name: 'ChatWindow',\r\n  props: {\r\n    messages: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    selectedUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const messagesContainer = ref(null)\r\n\r\n    const scrollToBottom = () => {\r\n      if (messagesContainer.value) {\r\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      scrollToBottom()\r\n    })\r\n\r\n    onUpdated(() => {\r\n      scrollToBottom()\r\n    })\r\n\r\n    const isSentMessage = (message) => {\r\n      return message.from === props.currentUser._id\r\n    }\r\n\r\n    const formatTime = (timestamp) => {\r\n      return new Date(timestamp).toLocaleTimeString([], { \r\n        hour: '2-digit', \r\n        minute: '2-digit' \r\n      })\r\n    }\r\n\r\n    return {\r\n      messagesContainer,\r\n      isSentMessage,\r\n      formatTime\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-messages {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  padding: 1rem;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 1rem;\r\n  max-width: 70%;\r\n}\r\n\r\n.message-sent {\r\n  margin-left: auto;\r\n}\r\n\r\n.message-received {\r\n  margin-right: auto;\r\n}\r\n\r\n.message-content {\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 1rem;\r\n  position: relative;\r\n}\r\n\r\n.message-sent .message-content {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.message-received .message-content {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.message-time {\r\n  display: block;\r\n  font-size: 0.75rem;\r\n  margin-top: 0.25rem;\r\n  opacity: 0.7;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EADjCC,GAAA;EAEsCF,KAAK,EAAC;;;EASjCA,KAAK,EAAC;AAAiB;;EAEnBA,KAAK,EAAC;AAAc;;uBAZjCG,mBAAA,CAeM,OAfNC,UAeM,GAdOC,MAAA,CAAAC,QAAQ,CAACC,MAAM,U,cAA1BJ,mBAAA,CAEM,OAFNK,UAEM,EAFgE,4CAEtE,KAJJC,mBAAA,iB,kBAKIN,mBAAA,CAUMO,SAAA,QAfVC,WAAA,CAMiCN,MAAA,CAAAC,QAAQ,EANzC,CAMcM,OAAO,EAAEC,KAAK;yBADxBV,mBAAA,CAUM;MARHD,GAAG,EAAEW,KAAK;MACXb,KAAK,EARXc,eAAA,EAQY,SAAS;QAAA,gBACWC,MAAA,CAAAC,aAAa,CAACJ,OAAO;QAAA,qBAAwBG,MAAA,CAAAC,aAAa,CAACJ,OAAO;MAAA;QAE5FK,mBAAA,CAGM,OAHNC,UAGM,GAdZC,gBAAA,CAAAC,gBAAA,CAYWR,OAAO,CAACS,OAAO,IAAG,GACrB,iBAAAJ,mBAAA,CAA4F,SAA5FK,UAA4F,EAAAF,gBAAA,CAA7DL,MAAA,CAAAQ,UAAU,CAACX,OAAO,CAACY,SAAS,IAAIZ,OAAO,CAACa,SAAS,kB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}