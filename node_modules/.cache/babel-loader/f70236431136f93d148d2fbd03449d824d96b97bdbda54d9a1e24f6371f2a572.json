{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { onMounted, onUpdated, ref, computed } from 'vue';\nexport default {\n  name: 'ChatWindow',\n  props: {\n    messages: {\n      type: Array,\n      required: true\n    },\n    currentUser: {\n      type: Object,\n      required: true\n    },\n    selectedUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const messagesContainer = ref(null);\n\n    // Group messages by date\n    const groupedMessages = computed(() => {\n      const groups = {};\n      props.messages.forEach(msg => {\n        const date = new Date(msg.createdAt || msg.timestamp).toLocaleDateString();\n        if (!groups[date]) {\n          groups[date] = [];\n        }\n        groups[date].push(msg);\n      });\n      return groups;\n    });\n    const scrollToBottom = () => {\n      if (messagesContainer.value) {\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n      }\n    };\n    onMounted(() => {\n      scrollToBottom();\n    });\n    onUpdated(() => {\n      scrollToBottom();\n    });\n    const isSentMessage = message => {\n      return message.from === props.currentUser._id;\n    };\n    const formatTime = timestamp => {\n      return new Date(timestamp).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n    const formatDate = dateString => {\n      const today = new Date().toLocaleDateString();\n      const yesterday = new Date(Date.now() - 86400000).toLocaleDateString();\n      if (dateString === today) {\n        return 'Today';\n      } else if (dateString === yesterday) {\n        return 'Yesterday';\n      }\n      return dateString;\n    };\n    return {\n      messagesContainer,\n      groupedMessages,\n      isSentMessage,\n      formatTime,\n      formatDate\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUpdated","ref","computed","name","props","messages","type","Array","required","currentUser","Object","selectedUser","setup","messagesContainer","groupedMessages","groups","forEach","msg","date","Date","createdAt","timestamp","toLocaleDateString","push","scrollToBottom","value","scrollTop","scrollHeight","isSentMessage","message","from","_id","formatTime","toLocaleTimeString","hour","minute","formatDate","dateString","today","yesterday","now"],"sources":["E:\\cursor\\client\\src\\components\\chat\\ChatWindow.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-container\">\r\n      <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n        <div v-if=\"messages.length === 0\" class=\"text-center text-muted my-4\">\r\n          No messages yet. Start the conversation!\r\n        </div>\r\n        <div \r\n          v-for=\"(message, index) in groupedMessages\" \r\n          :key=\"index\"\r\n          class=\"message-group\"\r\n        >\r\n          <div class=\"message-date-divider\">{{ formatDate(index) }}</div>\r\n          <div \r\n            v-for=\"msg in message\" \r\n            :key=\"msg._id\"\r\n            class=\"message\"\r\n            :class=\"{ 'message-sent': isSentMessage(msg), 'message-received': !isSentMessage(msg) }\"\r\n          >\r\n            <div class=\"message-content\">\r\n              {{ msg.content }}\r\n              <small class=\"message-time\">{{ formatTime(msg.createdAt || msg.timestamp) }}</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUpdated, ref, computed } from 'vue'\r\n  \r\n  export default {\r\n    name: 'ChatWindow',\r\n    props: {\r\n      messages: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      currentUser: {\r\n        type: Object,\r\n        required: true\r\n      },\r\n      selectedUser: {\r\n        type: Object,\r\n        required: true\r\n      }\r\n    },\r\n    setup(props) {\r\n      const messagesContainer = ref(null)\r\n  \r\n      // Group messages by date\r\n      const groupedMessages = computed(() => {\r\n        const groups = {}\r\n        props.messages.forEach(msg => {\r\n          const date = new Date(msg.createdAt || msg.timestamp).toLocaleDateString()\r\n          if (!groups[date]) {\r\n            groups[date] = []\r\n          }\r\n          groups[date].push(msg)\r\n        })\r\n        return groups\r\n      })\r\n  \r\n      const scrollToBottom = () => {\r\n        if (messagesContainer.value) {\r\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n        }\r\n      }\r\n  \r\n      onMounted(() => {\r\n        scrollToBottom()\r\n      })\r\n  \r\n      onUpdated(() => {\r\n        scrollToBottom()\r\n      })\r\n  \r\n      const isSentMessage = (message) => {\r\n        return message.from === props.currentUser._id\r\n      }\r\n  \r\n      const formatTime = (timestamp) => {\r\n        return new Date(timestamp).toLocaleTimeString([], { \r\n          hour: '2-digit', \r\n          minute: '2-digit'\r\n        })\r\n      }\r\n  \r\n      const formatDate = (dateString) => {\r\n        const today = new Date().toLocaleDateString()\r\n        const yesterday = new Date(Date.now() - 86400000).toLocaleDateString()\r\n  \r\n        if (dateString === today) {\r\n          return 'Today'\r\n        } else if (dateString === yesterday) {\r\n          return 'Yesterday'\r\n        }\r\n        return dateString\r\n      }\r\n  \r\n      return {\r\n        messagesContainer,\r\n        groupedMessages,\r\n        isSentMessage,\r\n        formatTime,\r\n        formatDate\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n  }\r\n  \r\n  .chat-messages {\r\n    height: calc(100vh - 300px);\r\n    overflow-y: auto;\r\n    padding: 1rem;\r\n    background-color: #f8f9fa;\r\n  }\r\n  \r\n  .message-group {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .message-date-divider {\r\n    text-align: center;\r\n    margin: 1rem 0;\r\n    position: relative;\r\n    color: #6c757d;\r\n    font-size: 0.875rem;\r\n  }\r\n  \r\n  .message-date-divider::before,\r\n  .message-date-divider::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    width: 45%;\r\n    height: 1px;\r\n    background-color: #dee2e6;\r\n  }\r\n  \r\n  .message-date-divider::before {\r\n    left: 0;\r\n  }\r\n  \r\n  .message-date-divider::after {\r\n    right: 0;\r\n  }\r\n  \r\n  .message {\r\n    margin-bottom: 0.5rem;\r\n    max-width: 70%;\r\n    animation: fadeIn 0.3s ease-in-out;\r\n  }\r\n  \r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n      transform: translateY(10px);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  \r\n  .message-sent {\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .message-received {\r\n    margin-right: auto;\r\n  }\r\n  \r\n  .message-content {\r\n    padding: 0.75rem 1rem;\r\n    border-radius: 1rem;\r\n    position: relative;\r\n    box-shadow: 0 1px 2px rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .message-sent .message-content {\r\n    background-color: #007bff;\r\n    color: white;\r\n    border-bottom-right-radius: 0.25rem;\r\n  }\r\n  \r\n  .message-received .message-content {\r\n    background-color: white;\r\n    border-bottom-left-radius: 0.25rem;\r\n  }\r\n  \r\n  .message-time {\r\n    display: block;\r\n    font-size: 0.75rem;\r\n    margin-top: 0.25rem;\r\n    opacity: 0.7;\r\n  }\r\n  \r\n  /* Scrollbar styling */\r\n  .chat-messages::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-thumb {\r\n    background: #888;\r\n    border-radius: 3px;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-thumb:hover {\r\n    background: #555;\r\n  }\r\n  </style>"],"mappings":";;;AA6BE,SAASA,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,QAAO,QAAS,KAAI;AAExD,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDC,WAAW,EAAE;MACXH,IAAI,EAAEI,MAAM;MACZF,QAAQ,EAAE;IACZ,CAAC;IACDG,YAAY,EAAE;MACZL,IAAI,EAAEI,MAAM;MACZF,QAAQ,EAAE;IACZ;EACF,CAAC;EACDI,KAAKA,CAACR,KAAK,EAAE;IACX,MAAMS,iBAAgB,GAAIZ,GAAG,CAAC,IAAI;;IAElC;IACA,MAAMa,eAAc,GAAIZ,QAAQ,CAAC,MAAM;MACrC,MAAMa,MAAK,GAAI,CAAC;MAChBX,KAAK,CAACC,QAAQ,CAACW,OAAO,CAACC,GAAE,IAAK;QAC5B,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,GAAG,CAACG,SAAQ,IAAKH,GAAG,CAACI,SAAS,CAAC,CAACC,kBAAkB,CAAC;QACzE,IAAI,CAACP,MAAM,CAACG,IAAI,CAAC,EAAE;UACjBH,MAAM,CAACG,IAAI,IAAI,EAAC;QAClB;QACAH,MAAM,CAACG,IAAI,CAAC,CAACK,IAAI,CAACN,GAAG;MACvB,CAAC;MACD,OAAOF,MAAK;IACd,CAAC;IAED,MAAMS,cAAa,GAAIA,CAAA,KAAM;MAC3B,IAAIX,iBAAiB,CAACY,KAAK,EAAE;QAC3BZ,iBAAiB,CAACY,KAAK,CAACC,SAAQ,GAAIb,iBAAiB,CAACY,KAAK,CAACE,YAAW;MACzE;IACF;IAEA5B,SAAS,CAAC,MAAM;MACdyB,cAAc,CAAC;IACjB,CAAC;IAEDxB,SAAS,CAAC,MAAM;MACdwB,cAAc,CAAC;IACjB,CAAC;IAED,MAAMI,aAAY,GAAKC,OAAO,IAAK;MACjC,OAAOA,OAAO,CAACC,IAAG,KAAM1B,KAAK,CAACK,WAAW,CAACsB,GAAE;IAC9C;IAEA,MAAMC,UAAS,GAAKX,SAAS,IAAK;MAChC,OAAO,IAAIF,IAAI,CAACE,SAAS,CAAC,CAACY,kBAAkB,CAAC,EAAE,EAAE;QAChDC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC;IACH;IAEA,MAAMC,UAAS,GAAKC,UAAU,IAAK;MACjC,MAAMC,KAAI,GAAI,IAAInB,IAAI,CAAC,CAAC,CAACG,kBAAkB,CAAC;MAC5C,MAAMiB,SAAQ,GAAI,IAAIpB,IAAI,CAACA,IAAI,CAACqB,GAAG,CAAC,IAAI,QAAQ,CAAC,CAAClB,kBAAkB,CAAC;MAErE,IAAIe,UAAS,KAAMC,KAAK,EAAE;QACxB,OAAO,OAAM;MACf,OAAO,IAAID,UAAS,KAAME,SAAS,EAAE;QACnC,OAAO,WAAU;MACnB;MACA,OAAOF,UAAS;IAClB;IAEA,OAAO;MACLxB,iBAAiB;MACjBC,eAAe;MACfc,aAAa;MACbI,UAAU;MACVI;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}